"""""""""""""""""""""""""""""""""""""""""""""""""
" Boon Heng Vim Configuration
"""""""""""""""""""""""""""""""""""""""""""""""""
if &compatible
  set nocompatible   " allow vim specific settings even if break vi bindings
endif

set encoding=utf8

""""""""""""""""""""""""""""
" utility functions
""""""""""""""""""""""""""""

function! s:source_file(path, ...) abort
	let use_global = get(a:000, 0, ! has('vim_starting'))

	let abspath = resolve(expand($HOME."/".a:path))
	if ! use_global
		execute 'source' fnameescape(abspath)
		return
	endif

	let content = map(readfile(abspath),
		\ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
	let tempfile = tempname()
	try
		call writefile(content, tempfile)
		execute printf('source %s', fnameescape(tempfile))
	finally
		if filereadable(tempfile)
			call delete(tempfile)
		endif
	endtry
endfunction


"""""""""""""""""""""""""""
" Other settings
"""""""""""""""""""""""""""
" OSX stupid backspace fix
set backspace=indent,eol,start

" ensure config work for vim + nvim (ttymouse was removed in nvim)
if !has('nvim')
  " name of terminal that support mouse codes if mouse is enabled
  set ttymouse=xterm2
endif

" Markdown Syntax Support
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" treat tab as 2 spaces
set tabstop=4 softtabstop=0 expandtab shiftwidth=2 smarttab 

" enable file type detection
filetype on

set mouse-=a     " avoid entering visual mode in vim with mouse selection 
set incsearch    " find as you type
set ignorecase   " ignore case in search
set history=300  " number of commands to remember in history
set hlsearch     " highlight matches in search
set scrolloff=5  " no. of lines to keep above/below cursor
set smartcase    " only ignore case when all letters are lowercase
set number       " show line numbers
set ruler        " show line and column number
set wildmode=longest,list " complete longest string, then list alternative
set fileformats=unix  " use Unix line endings
set formatoptions=1   " don't wrap text after a 1-letter word
set nowrap       " disable text wrap
set linebreak    " break lines when appropriate
set smartindent  " smart autoindenting on new line
set autoindent   " auto indent based on previous line
set backspace=2  " use standard backspace behavior
set laststatus=2 " always display the status line
set cursorline   " enable highlighting of the current line

let g:elite_mode=1 "enable elite mode, no arrows

" enable syntax coloring
syntax enable
syntax on

""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF configuration 
""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-p> :Files<Enter>
if has('nvim')
  aug fzf_setup
    au!
    au TermOpen term://*FZF tnoremap <silent> <buffer><nowait> <esc> <c-c>
  aug END
end

""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree configuration 
""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd vimenter * NERDTree

""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERD Commenter configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDCompactSexyComs = 1           " Use compact syntax for prettified multi-line comments
let g:NERDSpaceDelims = 1               " Add spaces after comment delimiters by default
let g:NERDDefaultAlign = 'left'         " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDCommentEmptyLines = 1         " Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDTrimTrailingWhitespace = 1    " Enable trimming of trailing whitespace when uncommenting
let g:NERDToggleCheckAllLines = 1       " Enable NERDCommenterToggle to check all selected lines is commented or not 

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""

call s:source_file('.config/nvim/mappings.vim')

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color, style and theme configuration 
""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256
set background=dark


" neovim/vim true color support
if (has("termguicolors"))
  set termguicolors
endif

" color scheme
let base16colorspace=256
colorscheme base16-default-dark

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line using lightline
""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left':  [ [ 'mode', 'paste' ],
      \              [ 'gitbranch', 'readonly', 'filename', 'modified', 'method' ] ],
      \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
      \              [ 'lineinfo' ],
      \              [ 'percent' ], 
      \              [ 'fileformat', 'fileencoding', 'filetype' ], 
      \            ] },
      \ 'component': {
      \   'spell': '%{&spell?&spelllang:"no spell"}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \ },
      \ 'component_function': {
	  \   'gitbranch': 'FugitiveHead',
      \   'method': 'NearestMethodOrFunction',
      \   'filename': 'LightlineFilename',
	  \ },
      \ 'component_expand': {
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_infos': 'lightline#ale#infos',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \   'linter_checking': 'right',
      \   'linter_infos': 'right',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \   'linter_ok': 'right',
      \ },
    \ }

let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"

function! LightlineFilename()
  return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
        \ &filetype ==# 'unite' ? unite#get_status_string() :
        \ &filetype ==# 'vimshell' ? vimshell#get_status_string() :
        \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0