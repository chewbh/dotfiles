"""""""""""""""""""""""""""""""""""""""""""""""""
" Boon Heng Vim Configuration
"""""""""""""""""""""""""""""""""""""""""""""""""
if &compatible
  set nocompatible   " allow vim specific settings even if break vi bindings
endif

set encoding=utf8

""""""""""""""""""""""""""""
" utility functions
""""""""""""""""""""""""""""

function! s:source_file(path, ...) abort
	let use_global = get(a:000, 0, ! has('vim_starting'))

	let abspath = resolve(expand($HOME."/".a:path))
	if ! use_global
		execute 'source' fnameescape(abspath)
		return
	endif

	let content = map(readfile(abspath),
		\ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
	let tempfile = tempname()
	try
		call writefile(content, tempfile)
		execute printf('source %s', fnameescape(tempfile))
	finally
		if filereadable(tempfile)
			call delete(tempfile)
		endif
	endtry
endfunction


"""""""""""""""""""""""""""
" Other settings
"""""""""""""""""""""""""""
" OSX stupid backspace fix
set backspace=indent,eol,start

" ensure config work for vim + nvim (ttymouse was removed in nvim)
if !has('nvim')
  " name of terminal that support mouse codes if mouse is enabled
  set ttymouse=xterm2
endif

" Markdown Syntax Support
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" treat tab as 2 spaces
set tabstop=4 softtabstop=0 expandtab shiftwidth=2 smarttab 

" enable file type detection
filetype on

set mouse-=a     " avoid entering visual mode in vim with mouse selection 
set incsearch    " find as you type
set ignorecase   " ignore case in search
set history=300  " number of commands to remember in history
set hlsearch     " highlight matches in search
set scrolloff=5  " no. of lines to keep above/below cursor
set smartcase    " only ignore case when all letters are lowercase
set number       " show line numbers
set ruler        " show line and column number
set wildmode=longest,list " complete longest string, then list alternative
set fileformats=unix  " use Unix line endings
set formatoptions=1   " don't wrap text after a 1-letter word
set nowrap       " disable text wrap
set linebreak    " break lines when appropriate
set smartindent  " smart autoindenting on new line
set autoindent   " auto indent based on previous line
set backspace=2  " use standard backspace behavior
set laststatus=2 " always display the status line
set cursorline   " enable highlighting of the current line

let g:elite_mode=1 "enable elite mode, no arrows

" enable syntax coloring
syntax enable
syntax on

""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF configuration 
""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-p> :Files<Enter>
if has('nvim')
  aug fzf_setup
    au!
    au TermOpen term://*FZF tnoremap <silent> <buffer><nowait> <esc> <c-c>
  aug END
end

""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree configuration 
""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd vimenter * NERDTree

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""

call s:source_file('.config/nvim/mappings.vim')

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color, style and theme configuration 
""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256
set background=dark

" neovim/vim true color support
if (has("termguicolors"))
  set termguicolors
endif

" color scheme
let base16colorspace=256
colorscheme base16-default-dark

" vim-airline configuration
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1 
let g:airline_theme='hybrid'
" let g:airline_theme='base16_spacemacs'
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 

" syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1